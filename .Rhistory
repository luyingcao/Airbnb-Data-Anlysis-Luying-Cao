geom_line(stat = "count") +
labs(title = "Relationship between distance and time") +
theme(plot.title = element_text(hjust = 0.5))
# add ggplot code + insights in this chunk!
ggplot(trip_distance) +
aes(x = trip_distance, y = passenger_count, col = "red") +
labs(title = "Relationship between distance and time") +
theme(plot.title = element_text(hjust = 0.5))
# add ggplot code + insights in this chunk!
ggplot(trip_distance) +
aes(x = trip_distance, y = passenger_count) +
geom_line(col = "red")
labs(title = "Relationship between distance and time") +
theme(plot.title = element_text(hjust = 0.5))
# explore trip_fares
dbGetQuery(con, statement = "
SELECT *
FROM trip_fares LIMIT 5")
dbGetQuery(con, statement = "
SELECT COUNT(*), payment_type
FROM trip_fares
GROUP_BY payment_type DESC
")
# what does the query output tell us?
dbGetQuery(con, statement = "
SELECT COUNT(*), payment_type
FROM trip_fares
GROUP_BY payment_type
GROUP_BY 2 DESC
")
# what does the query output tell us?
library(RPostgreSQL)
host <- "analyticsga-east2.c20gkj5cvu3l.us-east-1.rds.amazonaws.com"
port <- "5432"
username <- "analytics_student"
password <- "analyticsga"
dbname <- "nyc_taxi_trips_database"
drv <- dbDriver("PostgreSQL")
#  establish the connection
con <- dbConnect(drv, user = username, password = password,
dbname = dbname, port = port, host = host)
dbGetQuery(con, statement = "
SELECT COUNT(*), payment_type
FROM trip_fares
GROUP_BY payment_type
GROUP_BY 2 DESC
")
# what does the query output tell us?
dbGetQuery(con, statement = "
SELECT payment_type, COUNT(*)
FROM trip_fares
GROUP_BY payment_type
GROUP_BY 2 DESC
")
# what does the query output tell us?
library(RPostgreSQL)
host <- "analyticsga-east2.c20gkj5cvu3l.us-east-1.rds.amazonaws.com"
port <- "5432"
username <- "analytics_student"
password <- "analyticsga"
dbname <- "nyc_taxi_trips_database"
drv <- dbDriver("PostgreSQL")
#  establish the connection
con <- dbConnect(drv, user = username, password = password,
dbname = dbname, port = port, host = host)
# explore tables in the database
dbListTables(con)
# explore column names in each table
dbListFields(con, "trip_data")
dbListFields(con, "trip_fares")
# explore trip_data
dbGetQuery(con, statement = "
SELECT COUNT(*)
FROM trip_data LIMIT 5")
# how many rows are we dealing with? this may take 10+ seconds...
dbGetQuery(con, statement = "
SELECT COUNT(*)
FROM trip_data")
trip_distance <- dbGetQuery(con, statement = "
SELECT trip_distance
FROM trip_data
LIMIT 20000")
str(trip_distance)
library(ggplot2)
# add ggplot code + summary stats + insights in this chunk!
ggplot(trip_distance, aes(trip_distance)) +
geom_histogram() +
labs(title = "Histogram of trip_distance")
summary(trip_distance)
# mean = 3.202, median = 2.230, min = 0.00, max = 43.97
# The majority of the values fall around zero.
trip_distance <- dbGetQuery(con, statement = "
SELECT passenger_count, trip_distance, trip_time_in_secs/60
FROM trip_data
LIMIT 20000")
str(trip_distance)
# add ggplot code + insights in this chunk!
ggplot(trip_distance) +
aes(x = trip_distance, y = passenger_count) +
geom_line(col = "red")
labs(title = "Relationship between distance and time") +
theme(plot.title = element_text(hjust = 0.5))
# explore trip_fares
dbGetQuery(con, statement = "
SELECT *
FROM trip_fares LIMIT 5")
dbGetQuery(con, statement = "
SELECT payment_type, COUNT(*)
FROM trip_fares
GROUP_BY payment_type
GROUP_BY 2 DESC
")
# what does the query output tell us?
dbGetQuery(con, statement = "
SELECT payment_type, COUNT(*)
FROM trip_fares
GROUP BY payment_type
GROUP BY 2 DESC
")
# what does the query output tell us?
dbGetQuery(con, statement = "
SELECT payment_type, COUNT(*)
FROM trip_fares
GROUP BY payment_type
ORDER BY 2 DESC
")
# what does the query output tell us?
dbGetQuery(con, statement = "
SELECT payment_type, avg(total_amount) as avgtotal
FROM trip_fares
GROUP BY payment_type
ORDER BY 2 DESC
")
# what does the query output tell us?
dbGetQuery(con, statement = "
SELECT payment_type, avg(total_amount)
FROM trip_fares
GROUP BY payment_type
ORDER BY 2 DESC
")
# what does the query output tell us?
# The most frequent payment type are unknown, card, and disputed fare.
dbGetQuery(con, statement = "
SELECT payment_type, avg(tip_amount) as avgtip
FROM trip_fares
GROUP BY payment_type
ORDER BY 2 DESC
")
# what does the query output tell us?
dbGetQuery(con, statement = "
SELECT payment_type, avg(tip_amount) as avgtip
FROM trip_fares
GROUP BY payment_type
ORDER BY 2 DESC
")
# what does the query output tell us?
#
data_for_chart <- dbGetQuery(con, statement = "
SELECT payment_type, total_amount
FROM trip_fares
WHERE payment_type=CSH or CRD")
# add ggplot code + insights here!
data_for_chart <- dbGetQuery(con, statement = "
SELECT payment_type, total_amount
FROM trip_fares
WHERE payment_type="CSH" or "CRD")
data_for_chart <- dbGetQuery(con, statement = "
SELECT payment_type, total_amount
FROM trip_fares
WHERE payment_type='CSH' or 'CRD')
# add ggplot code + insights here!
data_for_chart <- dbGetQuery(con, statement = "
SELECT payment_type, total_amount
FROM trip_fares
WHERE payment_type='CSH' or payment_type='CRD')
# add ggplot code + insights here!
data_for_chart <- dbGetQuery(con, statement = "
SELECT payment_type, total_amount
FROM trip_fares
WHERE payment_type='CSH' or payment_type='CRD'
LIMIT 20000")
# add ggplot code + insights here!
data_for_chart <- dbGetQuery(con, statement = "
SELECT payment_type, total_amount
FROM trip_fares
WHERE payment_type='CSH' or payment_type='CRD'
LIMIT 20000")
# add ggplot code + insights here!
ggplot(chart1, aes(x = payment_type, y = total_amount) +
geom_point())
data_for_chart <- dbGetQuery(con, statement = "
SELECT payment_type, total_amount
FROM trip_fares
WHERE payment_type='CSH' or payment_type='CRD'
LIMIT 20000")
# add ggplot code + insights here!
ggplot(data_for_chart, aes(x = payment_type, y = total_amount) +
geom_point())
data_for_chart <- dbGetQuery(con, statement = "
SELECT payment_type, total_amount
FROM trip_fares
WHERE payment_type='CSH' or payment_type='CRD'
LIMIT 20000")
# add ggplot code + insights here!
ggplot(data_for_chart, aes(x = payment_type, y = total_amount)) +
geom_point()
dbGetQuery(con, statement = "
SELECT *
FROM trip_data
LIMIT 5")
map_data <- dbGetQuery(con, statement = "
SELECT pickup_longitude, pickup_latitude
FROM trip_data
LIMIT 5000")
# install.packages("ggmap")
library(ggmap)
# add ggmap code + insights in this chunk!
us_center <- as.numeric(geocode("United States"))
USmap <- ggmap(get_googlemap(center = us_center, scale = 2, zoom = 4), extent = "normal")
USmap + geom_point(aes(x = pickup_longitue, y = pick_latitude),
data = map_data, pickup_longitude != 0 & pickup_latitude != 0), alpha = 0.1) +
# install.packages("ggmap")
library(ggmap)
# add ggmap code + insights in this chunk!
us_center <- as.numeric(geocode("United States"))
USmap <- ggmap(get_googlemap(center = us_center, scale = 2, zoom = 4), extent = "normal")
USmap + geom_point(aes(x = pickup_longitude, y = pick_latitude),
data = map_data, pickup_longitude != 0 & pickup_latitude != 0), alpha = 0.1) +
# install.packages("ggmap")
library(ggmap)
# add ggmap code + insights in this chunk!
us_center <- as.numeric(geocode("United States"))
USmap <- ggmap(get_googlemap(center = us_center, scale = 2, zoom = 4), extent = "normal")
USmap + geom_point(aes(x = pickup_longitude, y = pick_latitude),
data = map_data, alpha = 0.1) +
labs(title = "pickup") +
theme(plot.title = element_text(hjust = 0.5))
# install.packages("ggmap")
library(ggmap)
# add ggmap code + insights in this chunk!
us_center <- as.numeric(geocode("United States"))
USmap <- ggmap(get_googlemap(center = us_center, scale = 2, zoom = 4), extent = "normal")
USmap + geom_point(aes(x = pickup_longitude, y = pick_latitude),
data = map_data, alpha = 0.1) +
theme(plot.title = element_text(hjust = 0.5))
# install.packages("ggmap")
library(ggmap)
# add ggmap code + insights in this chunk!
us_center <- as.numeric(geocode("United States"))
USmap <- ggmap(get_googlemap(center = us_center, scale = 2, zoom = 4), extent = "normal")
USmap + geom_point(aes(x = pickup_longitude, y = pick_latitude),
data = map_data, alpha = 0.1)
# install.packages("ggmap")
library(ggmap)
# add ggmap code + insights in this chunk!
us_center <- as.numeric(geocode("United States"))
USmap <- ggmap(get_googlemap(center = us_center, scale = 2, zoom = 4), extent = "normal")
USmap + geom_point(aes(x = pickup_longitude, y = pick_latitude),
data = map_data), alpha = 0.1
# install.packages("ggmap")
library(ggmap)
# add ggmap code + insights in this chunk!
us_center <- as.numeric(geocode("United States"))
USmap <- ggmap(get_googlemap(center = us_center, scale = 2, zoom = 4), extent = "normal")
USmap + geom_point(aes(x = pickup_longitude, y = pick_latitude),
data = map_data) + alpha = 0.1
# install.packages("ggmap")
library(ggmap)
# add ggmap code + insights in this chunk!
us_center <- as.numeric(geocode("United States"))
USmap <- ggmap(get_googlemap(center = us_center, scale = 2, zoom = 4), extent = "normal")
USmap + geom_point(aes(x = pickup_longitude, y = pick_latitude),
data = map_data)
# install.packages("ggmap")
library(ggmap)
# add ggmap code + insights in this chunk!
us_center <- as.numeric(geocode("United States"))
USmap <- ggmap(get_googlemap(center = us_center, scale = 2, zoom = 4), extent = "normal")
USmap + geom_point(aes(x = pickup_longitude, y = pickup_latitude),
data = map_data)
# install.packages("ggmap")
library(ggmap)
# add ggmap code + insights in this chunk!
us_center <- as.numeric(geocode("United States"))
USmap <- ggmap(get_googlemap(center = us_center, scale = 2, zoom = 4), extent = "normal")
USmap + geom_point(aes(x = pickup_longitude, y = pickup_latitude),
data = map_data, col = "orange", alpha = 0.4)
# install.packages("ggmap")
library(ggmap)
# add ggmap code + insights in this chunk!
us_center <- as.numeric(geocode("United States"))
USmap <- ggmap(get_googlemap(center = us_center, scale = 2, zoom = 4), extent = "normal")
USmap + geom_point(aes(x = pickup_longitude, y = pickup_latitude),
data = map_data, col = "orange", alpha = 1)
# install.packages("ggmap")
library(ggmap)
# add ggmap code + insights in this chunk!
us_center <- as.numeric(geocode("United States"))
USmap <- ggmap(get_googlemap(center = us_center, scale = 2, zoom = 4), extent = "normal")
USmap + geom_point(aes(x = pickup_longitude, y = pickup_latitude),
data = map_data, col = "orange", alpha = 0.4)
install.packages("psy")
library(psy)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(ggmap)
data17_01 <- read.csv("tomslee_airbnb_boston_0779_2017-01-14.csv")
data17_02 <- read.csv("tomslee_airbnb_boston_0858_2017-02-16.csv")
data17_03 <- read.csv("tomslee_airbnb_boston_0931_2017-03-12.csv")
data17_04 <- read.csv("tomslee_airbnb_boston_1043_2017-04-08.csv")
data17_05 <- read.csv("tomslee_airbnb_boston_1187_2017-05-05.csv")
data17_06 <- read.csv("tomslee_airbnb_boston_1309_2017-06-10.csv")
data17_07 <- read.csv("tomslee_airbnb_boston_1429_2017-07-10.csv")
data17_1234 <- rbind(data17_01, data17_02, data17_03, data17_04)
data17_1234 <- data17_1234[, -c(4,11,14)] #delete empty and useless columns
data17_567 <- rbind(data17_05, data17_06, data17_07)
data17_567 <- data17_567[, -c(2,5,6,7,13,15,16,17,20)] #delete empty and useless columns
data17 <- rbind(data17_1234, data17_567)
colnames(data17)
data17 <- data17 %>% select(room_id, host_id, room_type, neighborhood, reviews, overall_satisfaction,
accommodates, bedrooms, price, latitude, longitude)
#my_data$latitude <- as.numeric(my_data$latitude)
#my_data$longitude <- as.numeric(my_data$longitude)
#merge into one csv and export it
#Calculate the average score of overall satisfaction by room_type
meansatisf<- data17 %>%
group_by(room_type) %>%
summarise(meansatisf = mean(overall_satisfaction))
meansatisf
ggplot(data = na.omit(meansatisf), mapping = aes(x = room_type, y = meansatisf, fill = room_type, rotate = 90)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Mean scores of overall satisfaction by room type")
#Calculate the average price by room_type
meanprice<- data17 %>%
group_by(room_type) %>%
summarise(meanprice = mean(price))
meanprice
ggplot(data = na.omit(meanprice), mapping = aes(x = room_type, y = meanprice, fill = room_type, rotate = 90)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Mean prices by room type")
library(ggplot2)
library(dplyr)
library(ggmap)
library(wordcloud)
library(RColorBrewer)
data17_01 <- read.csv("tomslee_airbnb_boston_0779_2017-01-14.csv")
data17_02 <- read.csv("tomslee_airbnb_boston_0858_2017-02-16.csv")
data17_03 <- read.csv("tomslee_airbnb_boston_0931_2017-03-12.csv")
data17_04 <- read.csv("tomslee_airbnb_boston_1043_2017-04-08.csv")
data17_05 <- read.csv("tomslee_airbnb_boston_1187_2017-05-05.csv")
data17_06 <- read.csv("tomslee_airbnb_boston_1309_2017-06-10.csv")
data17_07 <- read.csv("tomslee_airbnb_boston_1429_2017-07-10.csv")
data17_1234 <- rbind(data17_01, data17_02, data17_03, data17_04)
data17_1234 <- data17_1234[, -c(4,11,14)] #delete empty and useless columns
data17_567 <- rbind(data17_05, data17_06, data17_07)
data17_567 <- data17_567[, -c(2,5,6,7,13,15,16,17,20)] #delete empty and useless columns
data17 <- rbind(data17_1234, data17_567)
colnames(data17)
data17 <- data17 %>% select(room_id, host_id, room_type, neighborhood, reviews, overall_satisfaction,
accommodates, bedrooms, price, latitude, longitude)
#my_data$latitude <- as.numeric(my_data$latitude)
#my_data$longitude <- as.numeric(my_data$longitude)
#merge into one csv and export it
#Calculate the average score of overall satisfaction by room_type
meansatisf<- data17 %>%
group_by(room_type) %>%
summarise(meansatisf = mean(overall_satisfaction))
meansatisf
ggplot(data = na.omit(meansatisf), mapping = aes(x = room_type, y = meansatisf, fill = room_type, rotate = 90)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Mean scores of overall satisfaction by room type")
#Calculate the average price by room_type
meanprice<- data17 %>%
group_by(room_type) %>%
summarise(meanprice = mean(price))
meanprice
ggplot(data = na.omit(meanprice), mapping = aes(x = room_type, y = meanprice, fill = room_type, rotate = 90)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Mean prices by room type")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(pwr)
knitr::opts_chunk$set(echo = TRUE)
turns <- c(0,1,2,3,4,5,6,7,8,9,10,11,12,13)
obs <- c(14,30,36,68,43,43,30,14,10,6,4,1,1,0)
mean <- sum(turns*obs)/sum(obs)
barplot(height = obs,
names.arg = 0.13,
col = "yellow",
border = "blue")
abline(v = 3.893, col = "red", lwd = 2)
OE <- as.data.frame(cbind(turns, obs))
n <- sum(obs)
prob <- dpois(x = 0.13, lambda = mean)
# check
sum(prob)+(1-ppois(q = 13, lambda = mean))
E <- prob*300
# check
sum(E)
OE <- cbind(OE, E)
head(OE)
counts <- T(as.matrix(Select(OE, obs, E)))
turns <- c(0,1,2,3,4,5,6,7,8,9,10,11,12,13)
obs <- c(14,30,36,68,43,43,30,14,10,6,4,1,1,0)
mean <- sum(turns*obs)/sum(obs)
barplot(height = obs,
names.arg = 0.13,
col = "yellow",
border = "blue")
abline(v = 3.893, col = "red", lwd = 2)
OE <- as.data.frame(cbind(turns, obs))
n <- sum(obs)
prob <- dpois(x = 0.13, lambda = mean)
# check
sum(prob)+(1-ppois(q = 13, lambda = mean))
E <- prob*300
# check
sum(E)
OE <- cbind(OE, E)
head(OE)
counts <- T(as.matrix(Select(OE, obs, E)))
counts <- t(as.matrix(Select(OE, obs, E)))
turns <- c(0,1,2,3,4,5,6,7,8,9,10,11,12,13)
obs <- c(14,30,36,68,43,43,30,14,10,6,4,1,1,0)
mean <- sum(turns*obs)/sum(obs)
barplot(height = obs,
names.arg = 0.13,
col = "yellow",
border = "blue")
abline(v = 3.893, col = "red", lwd = 2)
OE <- as.data.frame(cbind(turns, obs))
n <- sum(obs)
prob <- dpois(x = 0.13, lambda = mean)
# check
sum(prob)+(1-ppois(q = 13, lambda = mean))
E <- prob*300
# check
sum(E)
OE <- cbind(OE, E)
head(OE)
counts <- t(as.matrix(select(OE, obs, E)))
barplot(counts, names.arg = 0.13, main = "observed vs. expected",
xlab = "N", col = c("darkblue", "red"),
legend = rownames(counts), beside = TRUE)
turns <- c(0,1,2,3,4,5,6,7,8,9,10,11,12,13)
obs <- c(14,30,36,68,43,43,30,14,10,6,4,1,1,0)
mean <- sum(turns*obs)/sum(obs)
barplot(height = obs,
names.arg = 0.13,
col = "yellow",
border = "blue")
abline(v = 3.893, col = "red", lwd = 2)
OE <- as.data.frame(cbind(turns, obs))
n <- sum(obs)
prob <- dpois(x = 0.13, lambda = mean)
# check
sum(prob)+(1-ppois(q = 13, lambda = mean))
E <- prob*300
# check
sum(E)
OE <- cbind(OE, E)
head(OE)
counts <- t(as.matrix(select(OE, obs, E)))
barplot(counts, names.arg = 0.13, main = "observed vs. expected",
xlab = "N", col = c("darkblue", "red"),
legend = rownames(counts), beside = TRUE)
counts
barplot(counts, names.arg = 0.13, main = "observed vs. expected",
barplot(counts, names.arg = 0.13, main = "observed vs. expected",
xlab = "N"
barplot(counts, names.arg = 0.13, main = "observed vs. expected",
S <- sum((OE$obs - OE$E)^2/OE$E)
S
x = seq(from = 0, to = 34, length.out = 100)
q <- dchisq(x = x, df = 13)
plot(x, y=q, type = "l", lwd = 3)
abline(v=S, col = "red", lwd = 3)
plot(x, y=q, type = "l", lwd = 3)
abline(v=S, col = "red", lwd = 3)
abline(v = 13, col = "blue", lwd = 2)
abline(v = 13 - 2*sqrt(2*13))
abline(v = 13 + 2*sqrt(2*13))
p = pchisq(q = S, df = 14-1, lower.tail = FALSE)
p
x = seq(from = 0, to = 34, length.out = 100)
q <- dchisq(x = x, df = 13)
w1 <- ES.wl(OE$E/300, OE$obs/300)
###Haviland's code
turns <- c(0,1,2,3,4,5,6,7,8,9,10,11,12,13)
obs <- c(14,30,36,68,43,43,30,14,10,6,4,1,1,0)
mean <- sum(turns*obs)/sum(obs)
barplot(height = obs,
names.arg = 0.13,
col = "yellow",
border = "blue")
abline(v = 3.893, col = "red", lwd = 2)
OE <- as.data.frame(cbind(turns, obs))
n <- sum(obs)
prob <- dpois(x = 0.13, lambda = mean)
# check
sum(prob)+(1-ppois(q = 13, lambda = mean))
E <- prob*300
# check
sum(E)
OE <- cbind(OE, E)
head(OE)
counts <- t(as.matrix(select(OE, obs, E)))
barplot(counts, names.arg = 0.13, main = "observed vs. expected",
xlab = "N", col = c("darkblue", "red"),
legend = rownames(counts), beside = TRUE)
setwd("~/Documents/test2/Airbnb Data Analysis/boston/Airbnb Data Anlysis-Luying Cao")
